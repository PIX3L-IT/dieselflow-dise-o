@startuml US-14-consultarReporte
title US-14-Consultar Reporte

actor Administrador

boundary "report.ejs" as parent_view
boundary "partialReport.ejs" as partial_view
boundary "reportRoutes" as routes
control "reportController.js" as controller
entity "User" as model_user
entity "Unit" as model_unit
entity "Report" as model_report
database "MongoDB" as db

== Frontend ==
Administrador -> parent_view: Seleccionar 'Reportes'
activate parent_view
parent_view -> routes: GET /reportes
deactivate parent_view
activate routes

routes -> controller: getFilters(request, response)
deactivate routes

== Backend ==
activate controller
controller ->> model_unit: findAll()
activate model_unit
model_unit ->> db: db.Unit.find({});
activate db
db -->> model_unit: units
deactivate db
model_unit -->> controller: units
deactivate model_unit

controller ->> model_user: fetchDrivers()
activate model_user
model_user ->> db: db.User.find({IDRole: 'Conductor'});
activate db
db -->> model_user: drivers
deactivate db
model_user -->> controller: drivers
deactivate model_user

== Frontend ==
controller -> routes: response.render('report', {units: units, drivers: drivers});
deactivate controller

activate routes
routes -> Administrador: HTML
deactivate routes

Administrador  -> parent_view: Seleccionar 'Generar'
activate parent_view

parent_view -> routes: POST /reportes/generar
deactivate parent_view
activate routes

routes -> controller: postReport(request, response)
deactivate routes

== Backend ==
activate controller
controller ->> model_report: fetchReport(startDate, endDate, selectedUnit, selectedDriver)
activate model_report
model_report ->> db: db.Report.find({loadDate: {$gt: startDate, $lt: endDate}});
activate db
db -->> model_report: reportData
deactivate db
model_report -->> controller: reportData
deactivate model_report

== Frontend ==
controller -> routes: response.render('partialReport', {reportData: reportData});
deactivate controller
activate routes
routes -> Administrador: HTML
deactivate routes
@enduml